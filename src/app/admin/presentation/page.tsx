'use client';

import { useState } from 'react';
import { PageTitle } from '@/components/shared/PageTitle';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Sparkles, AlertCircle, LayoutTemplate, List, Presentation as PresentationIcon } from 'lucide-react';
import { LoadingSpinner } from '@/components/shared/LoadingSpinner';
import { useToast } from '@/hooks/use-toast';
import { generatePresentation, type GeneratePresentationOutput } from '@/ai/flows/generate-presentation-flow';
import { Separator } from '@/components/ui/separator';


export default function PresentationPage() {
  const [presentation, setPresentation] = useState<GeneratePresentationOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleGenerateClick = async () => {
    setIsLoading(true);
    setError(null);
    setPresentation(null);

    try {
      const result = await generatePresentation({ topic: "Quarterly Business Review" });
      setPresentation(result);
      toast({
        title: "Presentation Generated!",
        description: "Your AI-powered business overview is ready.",
      });
    } catch (err) {
      console.error("AI Presentation Error:", err);
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
      setError(`Failed to generate presentation. ${errorMessage}`);
      toast({
        title: "Presentation Error",
        description: "Could not fetch AI presentation. Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const Slide = ({ title, bulletPoints, index }: { title: string; bulletPoints: string[]; index: number }) => (
    <Card className="shadow-md h-full flex flex-col">
        <CardHeader>
            <CardTitle className="flex items-center text-lg">
                <LayoutTemplate className="mr-2 h-5 w-5 text-primary" />
                {title}
            </CardTitle>
        </CardHeader>
        <CardContent className="flex-grow">
            <ul className="space-y-2">
                {bulletPoints.map((point, i) => (
                    <li key={i} className="flex items-start">
                        <List className="h-4 w-4 mr-2 mt-1 shrink-0 text-muted-foreground" />
                        <span className="text-sm text-foreground">{point}</span>
                    </li>
                ))}
            </ul>
        </CardContent>
        <CardFooter className="text-xs text-muted-foreground">
            Slide {index + 1}
        </CardFooter>
    </Card>
  );

  return (
    <div className="space-y-8">
        <PageTitle 
            title="AI Presentation Generator"
            description="Generate a business overview presentation based on live application data."
        />

        {!presentation && !isLoading && (
            <Card className="text-center shadow-lg">
                <CardHeader>
                    <CardTitle>Generate Your Presentation</CardTitle>
                    <CardDescription>Click the button below to have the AI analyze your app's data and create a summary presentation.</CardDescription>
                </CardHeader>
                <CardContent>
                     <Button size="lg" onClick={handleGenerateClick}>
                        <Sparkles className="mr-2 h-5 w-5" />
                        Generate Presentation
                    </Button>
                </CardContent>
            </Card>
        )}

        {isLoading && (
            <div className="text-center space-y-4 py-10">
                <LoadingSpinner size={48} />
                <p className="text-muted-foreground">The AI is analyzing data and building your presentation...</p>
            </div>
        )}

        {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

        {presentation && (
            <div className="space-y-8 animate-fadeInUp">
                <div className="text-center">
                    <h2 className="text-3xl font-bold font-headline flex items-center justify-center gap-3">
                        <PresentationIcon className="h-8 w-8 text-primary" />
                        {presentation.presentationTitle}
                    </h2>
                    <p className="text-muted-foreground mt-1">Generated by Sports Arena AI Analyst</p>
                </div>

                <Separator />

                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 items-stretch">
                    {presentation.slides.map((slide, index) => (
                        <Slide key={index} title={slide.slideTitle} bulletPoints={slide.bulletPoints} index={index} />
                    ))}
                </div>

                <div className="text-center mt-8">
                    <Button onClick={handleGenerateClick} disabled={isLoading}>
                         <Sparkles className="mr-2 h-5 w-5" />
                         Regenerate Presentation
                    </Button>
                </div>
            </div>
        )}
    </div>
  );
}
